#include<stdio.h>
#include<string.h>
#include<ctype.h>

char infix[50], postfix[50], stack[50];
char stack2[20][10];  // string stack to store operands
int i, j, top = -1, top2 = -1;

// precedence function
int prec(char c) {
    if (c == '+' || c == '-') return 1;
    if (c == '*' || c == '/') return 2;
    if (c == '^') return 3;
    return -1;
}

// convert infix to postfix
void postfixf() {
    i = 0;
    j = 0;
    while (infix[i] != '\0') {
        if (isalnum(infix[i])) {
            postfix[j++] = infix[i];
        } else if (infix[i] == '(') {
            stack[++top] = infix[i];
        } else if (infix[i] == ')') {
            while (top != -1 && stack[top] != '(') {
                postfix[j++] = stack[top--];
            }
            top--;
        } else {
            while (top != -1 && prec(stack[top]) >= prec(infix[i])) {
                postfix[j++] = stack[top--];
            }
            stack[++top] = infix[i];
        }
        i++;
    }
    while (top != -1) {
        postfix[j++] = stack[top--];
    }
    postfix[j] = '\0';
}

void main() {
    printf("Enter the expression: ");
    scanf("%s", infix);

    postfixf();
    printf("Postfix Expression: %s\n", postfix);

    i = 0;
    int ind = 1;
    FILE *fp1, *fp2, *fp3;
    fp1 = fopen("3add.txt", "w");
    fp2 = fopen("quad.txt", "w");
    fp3 = fopen("triple.txt", "w");

    while (postfix[i] != '\0') {
        if (isalnum(postfix[i])) {
            char temp[2];
            temp[0] = postfix[i];
            temp[1] = '\0';
            strcpy(stack2[++top2], temp);
        } else {
            char op2[10], op1[10], temp[10];
            strcpy(op2, stack2[top2--]);
            strcpy(op1, stack2[top2--]);

            // Generate temporary variable name
            sprintf(temp, "t%d", ind);

            // Write to files
            fprintf(fp1, "t%d = %s %c %s\n", ind, op1, postfix[i], op2);
            fprintf(fp2, "%c\t%s\t%s\tt%d\n", postfix[i], op1, op2, ind);
            fprintf(fp3, "%d\t%c\t%s\t%s\n", ind, postfix[i], op1, op2);

            // Push result back to stack
            strcpy(stack2[++top2], temp);
            ind++;
        }
        i++;
    }

    fclose(fp1);
    fclose(fp2);
    fclose(fp3);

    printf("Three Address, Quadruple, and Triple Codes generated successfully.\n");
}
