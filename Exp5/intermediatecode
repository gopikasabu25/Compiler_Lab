#include<stdio.h>
#include<string.h>
#include<ctype.h>
char post[100];
int prec(char c)
{
    if(c=='+'||c=='-')
        return 1;
    if(c=='*'||c=='/')
        return 2;
    if(c=='^')
        return 3;
    return 0;
}
void postfix(char infix[])
{
    char stack[100];
    int top=-1;
    int j=0,i=0;
    while(infix[j]!='\0')
    {
        if(isalnum(infix[j]))
        {
            post[i++]=infix[j];
        }
        else if(infix[j]=='(')
        {
            stack[++top]=infix[j];
        }
        else if(infix[j]==')')
        {
            while(stack[top]!='(')
            {
                post[i++]=stack[top--];
            }
            top--;
        }
        else
        {
            while(prec(stack[top])>=prec(infix[j]))
            {
                post[i++]=stack[top--];
            }
            stack[++top]=infix[j];
        }
        j++;

    }
    while (top != -1) {
    post[i++] = stack[top--];
}
    post[i]='\0';
}
int main()
{
    char infix[50];
    printf("enter the string:");
    scanf("%s",infix);
    FILE *fp1=fopen("pq.txt","w");
    FILE *fp2=fopen("tr.txt","w");
    postfix(infix);
    int k=0;
    char stack2[100][100];
    int top2=-1;
    int ind=1;
    while(post[k]!='\0')
    {
        if(isalnum(post[k]))
        {
            char temp[2];
            temp[0]=post[k];
            temp[1]='\0';
            strcpy(stack2[++top2],temp);
        }
        else
        {
            char op2[10],op1[10];
            strcpy(op2,stack2[top2--]);
            strcpy(op1,stack2[top2--]);
            char temp[5];
            sprintf(temp,"t%d",ind);
            strcpy(stack2[++top2],temp);

            fprintf(fp1,"%c\t%s\t%s\t%s\n",post[k],op1,op2,temp);
            if (op1[0] == 't')
                sprintf(op1, "(%c)", op1[1]);
            if (op2[0] == 't')
                sprintf(op2, "(%c)", op2[1]);

            fprintf(fp2, "%d\t%c\t%s\t%s\n", ind, post[k], op1, op2);

            ind++;
        }
        k++;
    }
   return 0;
}
